<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.83.1">
    <title>Meme Rater</title>

    <link rel="canonical" href="https://getbootstrap.com/docs/5.0/examples/masonry/">



    <!-- Bootstrap core CSS -->
    <!-- CSS only -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">

    <!-- Add icon library -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js">
    </script>
    <style>
        .bd-placeholder-img {
            font-size: 1.125rem;
            text-anchor: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
        }

        @media (min-width: 768px) {
            .bd-placeholder-img-lg {
                font-size: 3.5rem;
            }
        }
        .collapsible {
            background-color: #777;
            color: white;
            cursor: pointer;
            padding: 18px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            display: table;
        }

        .active, .collapsible:hover {
            background-color: #555;
        }

        .content {
            padding: 0 18px;
            display: none;
            overflow: visible;
            background-color: #f1f1f1;
            width: auto;
        }
    </style>

</head>

<body>

<main class="container py-5">
    <h1>Meme-o-Gram</h1>
   
    <p class="lead">Get your memes Rated </p>
    <p>Welcome {{username}}</p>
    <div class = "row content-justify-left">
        <a href = "/logout" class="btn-btn-secondary">Logout</a>
    </div>


    <hr class="my-5">

    <div class="row justify-content-center">
        <div class="card col-md-4">
            <div class="card-body">
                <form action=" /uploadmultiple" enctype="multipart/form-data" method="POST" username = "{{ username }}">
                    <div class="mb-3">
                        <label for="images" class="form-label">Upload Meme</label>
                        <input class="form-control" type="file" name="images" id="images" multiple required>
                    </div>
                    <div class="mb-3">
                        <input type="hidden" name="username" id="username" value = "{{ username }}"required class="form-control">
                    </div>
    
                    <div class="mb-3">
                        <label for="caption" class="form-label">Caption</label>
                        <textarea class="form-control" id="caption" name="caption" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-outline-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>

        
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
           Sort By
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <a class="dropdown-item" href="/orderbyupvotes">Upvotes (high - low)</a>
            <a class="dropdown-item" href="/orderbydownvotes">Downvotes (low - high)</a>
            <a class="dropdown-item" href="/">Posted On (latest Arrival)</a>
        </div>
    </div>
   

  
    <hr class="my-5">
    <div class="row" data-masonry='{"percentPosition": true }'>
        {{#each images}}
        {{#each this}}
        {{#if imageSourceUrl}}
        <div class="col-sm-6 col-lg-4 mb-4">
            <div class="card" style="display: flex; height:fit-content;">
             <img src='{{ this.imageSourceUrl }}' alt="..." style="width: 100%; height: 200">
                

                <div class="card-body">
                    <h5 class="card-title">{{ this.username }}</h5>
                    <p class="card-text">{{ this.caption }}
                    </p>
                    <p class="card-text"><small class="text-muted">posted on {{ this.postedon }}</small></p>
                    <button type="button" onclick="actOnPost(event); this.disabled = true;" data-post-id="{{ this._id }}"
                        class="btn btn-outline-primary btn-sm"><i class="fa fa-thumbs-o-up"></i>
                        Upvote </button>
                    <span id="Upvote-count-{{ this._id }}" hidden class="badge bg-primary">{{ this.upvotes
                        }}</span>
                    <span id="Upvote-count2-{{ this._id }}"  class="badge bg-primary">{{ this.upvotes.length
                        }}</span>
                    <button type="button"  onclick="actOnPost(event); this.disabled = true;" data-post-id="{{ this._id }}"
                        class="btn btn-outline-danger btn-sm">
                        <i class="fa fa-thumbs-o-down"></i>
                        Downvote
                    </button>
                    <span id="Downvote-count-{{ this._id }}" hidden class="badge bg-danger">{{ this.downvotes
                        }}</span>
                      <span id="Downvote-count2-{{ this._id }}"  class="badge bg-danger">{{ this.downvotes.length
                        }}</span>
                    {{!-- <div class = "card">     --}}
                        <div class="row mb-12">
                            <div class="col-sm-6 col-lg-4 mb-4">
                                <h4 class="border-bottom pb-2">Comments</h4>
                            </div>
                        </div>
                        <div class = "row mb-12">
                            <div class="col" style="width: 100%;">
                                <div class="form-group">
                                    <label for="">Write a comment</label>
                                    <textarea id = "textarea-{{ this._id }}"rows="3" class="form-control"></textarea>
                                </div>
                            </div>
                        </div>
                        
                        <div class = "row mb-4">
                            <div class="col-sm-6 col-lg-4 mb-4">
                                <button type = "button" onclick="actOnComment(event);" class="btn btn-primary float-right"  data-post-id="{{ this._id }}">Post comment</button>
                            </div>
                        </div>
                        <button type = "button" class = 'collapsible'> show comments </button>
                        <div class = "content">
                            <div class="row mb-4">
                                <div class="col-sm-6 col-lg-4 mb-4">
                                    <div class="typing text-success"></div>
                                    <ul class="comment__box-{{ this._id }}">
                                        {{#each this.comments}}
                                        <li>
                                            <div class="col md-6">
                                
                                            <h6>{{ this.username }}</h6>
                                            <p>{{ this.comment }}</p>
                                        </div>
                                        </li>
                                        {{/each}}
                                    </ul>
                                </div>
                            </div>
                        </div>
                    {{!-- </div> --}}
                </div>
            </div>
        </div>
        {{/if}}
        {{/each}}
        {{/each}}

    </div>

</main>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.25.3/moment.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
        content.style.display = "none";
        } else {
        content.style.display = "block";
        }
    });
}
</script>
<script>
    let socket = io()

    function actOnComment (e) {
        e.preventDefault();
        var postId = e.target.dataset.postId;
        console.log(postId);
        let textId = "textarea-" + postId;
        let comment = document.getElementById(textId).value;
        console.log('comment', comment);
        if(!comment){
            return;
        }
        postComment(comment, postId);
    }
    

    async function postComment(comment, postId) {
        // Append to dom
        //Broadcast
        //sync with mongodb
        let data = {
            username: '{{ username }}',
            uid: '{{ uid }}',
            comment: comment,
            postId: postId
        }
        appendToDom(data);
        broadcastComment (data);
        syncwithDB(data);
    }

    function appendToDom (data) {
        let lTag = document.createElement('li');
        lTag.classList.add('comment', 'mb-6');
        let markup = `
            <div class="col md-6">
                            
                                <h6>${data.username}</h6>
                                <p>${data.comment}</p>
            </div>
        `;
        lTag.innerHTML = markup;
        let commentBox = document.querySelector('.comment__box-' + data.postId);
        commentBox.prepend(lTag);
    }

    function broadcastComment (data) {
        socket.emit('comment', data);
    }
    socket.on('comment', (data) => {
        appendToDom(data)
    });
    

    function syncwithDB (data) {
        const headers = {
            'Content-Type': 'application/json'
        }
        fetch('/updateComments', {method: 'POST', body: JSON.stringify(data), headers})
            .then(response => response.json())
            .then(result => {
                console.log(result);
            })
    }
</script>
<script>
    
    var updatePostStats = {
        Upvote: function (postId) {
            document.querySelector('#Upvote-count2-' + postId).textContent++;
        },
        Downvote: function (postId) {
            document.querySelector('#Downvote-count2-' + postId).textContent++;
        }
    };

    var toggleButtonText = {
        Upvote: function (button) {
            button.textContent = "Upvote";
        },
        Downvote: function (button) {
            button.textContent = "Downvote";
        }
    };
    var actOnPost = function (event) {
        var postId = event.target.dataset.postId;
        var action = event.target.textContent.replace(/[0-9]/g, '').trim();
        const headers = {
            'Content-Type': 'application/json'
        }
        let data = {
            uid: '{{uid}}',
            action: action,
        }
        let data1 = {
            action : action,
            postId: postId
        }

        let imageUpvotedBy = document.getElementById('Upvote-count-' + postId).textContent;
        let imageUpvotedByArray = imageUpvotedBy.split(",");
        
        if(imageUpvotedByArray.includes(data.uid) == false && action == 'Upvote'){
            updatePostStats[action](postId);
            broadcastVote(data1);

            // await axios.post('posts/' + postId + '/act', { action: action, socketId: socketId, uid: data.uid});
            fetch('/posts/' + postId + '/act', {method: 'POST', body:JSON.stringify(data), headers})
            .then(response => response.json())
            .then(result => {
                console.log(result);
            })
        }
        let imageDownvotedBy = document.getElementById('Downvote-count-' + postId).textContent;
        //console.log(imageDownvotedBy);
        let imageDownvotedByArray = imageDownvotedBy.split(",");
        
        if(imageDownvotedByArray.includes(data.uid) == false && action == 'Downvote'){
            broadcastVote(data1);
            updatePostStats[action](postId);
             //await axios.post('posts/' + postId + '/act', { action: action, socketId: socketId, uid: data.uid});
             fetch('/posts/' + postId + '/act', {method: 'POST', body:JSON.stringify(data), headers})
            .then(response => response.json())
            .then(result => {
                console.log(result);
            })
        }
    };

    function broadcastVote(data) {
        socket.emit('Vote', data);
    }

    socket.on('Vote', (data) => {
        updatePostStats[data.action](data.postId);
    })
</script>
<script src="https://js.pusher.com/4.1/pusher.min.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


<script async src="https://cdn.jsdelivr.net/npm/masonry-layout@4.2.2/dist/masonry.pkgd.min.js"
    integrity="sha384-GNFwBvfVxBkLMJpYMOABq3c+d3KnQxudP/mGPkzpZSTYykLBNsZEnG2D9G/X/+7D"
    crossorigin="anonymous"></script>

</body>
</html>